'use strict';

var curry          = require('curry');

var linker         = require('linker');

var aggregatedLink = require('aggregated_link');

var colorValues    = require('graphics').valueColors;
var objectHelper   = require('object-helper');

var drawNode       = require('graphics').drawNode,
    drawTimeTable  = require('graphics').drawTimeTable;

var drawLinker     = require('graphics').drawLinker,
    drawLink       = require('graphics').drawLink,   
    drawChange     = require('graphics').drawChange, 
    drawText       = require('graphics').drawText,
    drawActor      = require('graphics').drawActor;

function clearCanvasAndTransform(ctx, canvas, tool, loadedModel, next) {
    ctx.clearRect(
        -loadedModel.settings.offsetX,
        -loadedModel.settings.offsetY,
        canvas.width,
        canvas.height
    );
    
    ctx.setTransform(
        loadedModel.settings.scaleX  || 1,
        0,
        0,
        loadedModel.settings.scaleY  || 1,
        loadedModel.settings.offsetX || 0,
        loadedModel.settings.offsetY || 0
    );

    next();
}

function drawNodes(ctx, canvas, tool, loadedModel, next) {
    objectHelper.forEach.call(
        loadedModel.nodeData,
        function drawEachNode(n) { 
            var nodeGui = objectHelper.merge.call(n, loadedModel.nodeGui[n.id]);
            if(!loadedModel.settings.linegraph) {
                nodeGui.linegraph = false;
            }

            nodeGui.url = tool.config.url;
            drawNode(ctx, nodeGui);
        }
    );

    next();
}

function drawLinks(ctx, canvas, tool, loadedModel, next) {
    // draw the links and arrows
    var actors = {};
    objectHelper.forEach.call(
        loadedModel.links,
        function drawLinksAndArrows(link) {
            var nodeData = loadedModel.nodeData[link.node1];
            if(nodeData.type.toUpperCase() === 'ACTOR') {
                if(!actors[link.node2]) {
                    actors[link.node2] = 0;
                }

                actors[link.node2] += 1;
                var layer = actors[link.node2];

                drawActor(ctx, layer, link, loadedModel);
            } else {
                drawLink(ctx, aggregatedLink(link, loadedModel.nodeGui));
            }
        }
    );

    next();
}

function drawNodeDescriptions(ctx, canvas, tool, loadedModel, next) {
    // draw all the node descriptions
    objectHelper.forEach.call(
        loadedModel.nodeData,
        function drawEachNodeText(n) { 
            var nodeGui = objectHelper.merge.call(n, loadedModel.nodeGui[n.id]);
            drawText(
                ctx,
                nodeGui.name,
                nodeGui.x,
                nodeGui.y + nodeGui.radius + 4,
                colorValues.neutral,
                true
            );
            /*
            ** If you add more environment specific code, please bundle
            ** it up into another method.
            **
            ** e.g. drawNodeInSimulation(nodeGui)
            */
            if(tool.static.showSimulate) {
                if(loadedModel.loadedScenario && loadedModel.loadedScenario.data[nodeGui.id]) {
                    drawTimeTable(ctx, nodeGui, loadedModel.loadedScenario.data[nodeGui.id], n.baseline);
                } else if(nodeGui.type.toUpperCase() !== 'ACTOR') {
                    var change;
                    var changeStr;
                    var baseline;
                    if(tool.static.renderChangePercent) {
                        change    = (Math.round(n.simulateChange[loadedModel.loadedScenario.timeStepN] * 100) / 100);
                        changeStr = change + '%';
                        baseline  = 0;
                    } else {
                        baseline  = n.baseline || 0;
                        change    = (baseline || 0) * (1 + (n.simulateChange[loadedModel.loadedScenario.timeStepN] / 100));
                        changeStr = change.toFixed(1);
                    }

                    drawChange(
                        ctx,
                        nodeGui.x,
                        nodeGui.y + nodeGui.radius / 6,
                        nodeGui.radius,
                        change,
                        changeStr,
                        baseline
                    );
                }
            }
        }
    );

    next();
}

function _drawLinker(ctx, canvas, tool, loadedModel, next) {
    // if there are nodes selected that aren't currently linking, we want to draw the linker
    var filteredNodes = objectHelper.filter.call(
        loadedModel.nodeGui,
        function drawLinkerOnSelectedNodes(node) {
            return node.selected === true && node.linking !== true;
        }
    );

    objectHelper.forEach.call(
        filteredNodes,
        function(n) {
            drawLinker(ctx, linker, n);
        }
    );

    next();
}

function drawLinkingLine(ctx, canvas, tool, loadedModel, next) {
    // if we are currently linking, we want to draw the link we're creating
    var linkingNodes = objectHelper.filter.call(
        loadedModel.nodeGui,
        function drawLinkingArrow(node) {
            return node.linking === true;
        }
    );

    objectHelper.forEach.call(
        linkingNodes,
        function(node) {
            var linkerForNode = linker(node);
            drawLink(ctx, {
                    type:         'fullchannel',
                    x1:           node.x,
                    y1:           node.y,
                    x2:           node.linkerX,
                    y2:           node.linkerY,
                    fromRadius:   node.radius,
                    targetRadius: 0,
                    width:        8
                }
            );
        }
    );

    // if we are linking, we want to draw the dot above everything else
    linkingNodes = objectHelper.filter.call(
        loadedModel.nodeGui,
        function drawLinkerDotWhileLinking(node) {
            return node.linking === true;
        }
    );

    objectHelper.forEach.call(
        linkingNodes,
        function(d){
            drawLinker(ctx, linker, d)
        }
    );
    
    next();
}

module.exports = {
    clearCanvasAndTransform: clearCanvasAndTransform,
    drawNodes:               drawNodes,
    drawLinks:               drawLinks,
    drawNodeDescriptions:    drawNodeDescriptions,
    _drawLinker:             _drawLinker,
    drawLinkingLine:         drawLinkingLine
};
