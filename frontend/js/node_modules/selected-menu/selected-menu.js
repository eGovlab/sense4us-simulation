'use strict';

'use strict';

var objectHelper = require('object-helper'),
    NewUI        = require('new_ui');

var Colors = NewUI.Colors;

var modelling    = require('settings').modelling;
var roles        = {};

modelling.forEach(function(group) {
    group.header = group.header.toUpperCase();
    if(!roles[group.header]) {
        roles[group.header] = [];
    }

    roles[group.header] = roles[group.header].concat(group.images);
});

var linkModellingFilter = [
    {property: 'type',        type: 'dropdown', values: ['halfchannel', 'fullchannel']},

    {property: 'threshold',   type: 'input', check: function(value) {
        var match = value.match(/^-?\d+\.?\d*$/);
        if(match === null) {
            return false;
        }

        return true;
    }, set: function(value){return parseFloat(value);}}, 

    {property: 'coefficient', type: 'input', check: function(value) {
        var match = value.match(/^-?\d+\.?\d*$/);
        if(match === null) {
            return false;
        }
        
        return true;
    }, set: function(value){return parseFloat(value);}},

    {property: 'timelag',     type: 'input', check: function(value) {
        var match = value.match(/^\d+$/);
        if(match === null) {
            return false;
        }

        return true;
    }, set: function(value){return parseInt(value);}},

    //{property: 'bidirectional', type: 'checkbox'},

    {property: 'bidirectionalTimelag', type: 'input', check: function(value) {
        var match = value.match(/^\d+$/);
        if(match === null) {
            return false;
        }

        return true;
    }, set: function(value) {
        return parseInt(value);
    }, showCondition: function(link) {
        console.log(link);
        return link.bidirectional;
    }}
],
    dataModellingFilter = [
    require('./lib/data-filters/timetable'),
    
    {property: 'name',        type: 'input', check: function() {
        return true;
    }},
    {property: 'description', type: 'input', check: function() {
        return true;
    }},
    {property: 'baseline',    type: 'input', check: function(value) {
        var match = value.match(/^-?\d+$/);
        if(match === null) {
            return false;
        }

        return true;
    }, set: function(value) {
        return parseFloat(value);
    }}
],
    guiModellingFilter  = [
    {property: 'color',         type: 'input', check: function(value) {
        var match = value.match(/^#[0-9a-fA-F]{3}$|^#[0-9a-fA-F]{6}$/);
        return match !== null;
    }},
    {property: 'avatar',        type: 'iconGroup', groups: roles}
];

var setupButton    = require('./lib/setup-button'),
    setupCheckbox  = require('./lib/setup-checkbox'),
    setupDropdown  = require('./lib/setup-dropdown'),
    setupIconGroup = require('./lib/setup-icon-group'),
    setupInput     = require('./lib/setup-input'),
    setupSlider    = require('./lib/setup-slider'),
    setupSystem    = require('./lib/setup-system');

function setupSelectedMenu(sidebar) {
    var menuItem = new NewUI.MenuItem(300);

    menuItem.setLabel('Selected');
    menuItem.root.style.display = 'none';

    sidebar.addItem(menuItem);

    var sidebarParent = sidebar.root.parentElement;
    sidebarParent.insertBefore(menuItem.child.root, sidebar.root.nextSibling);

    menuItem.child.root.style.right = '0';
    menuItem.child.root.style.top   = '0';
    menuItem.child.setHeight('100%');
    menuItem.child.root.style['max-height'] = '100%';

    return menuItem;
}

function SelectedMenu(tool, sidebar) {
    this.sidebar    = sidebar;
    this.container  = setupSelectedMenu.call(this, sidebar);
    this.listeners  = {};

    this.tool       = tool;

    this.previousSelected = false;
    this.showConditions   = null;
}

var Emitter = require('emitter');
SelectedMenu.prototype = {__proto__: Emitter.prototype};
SelectedMenu.prototype.renderNode = function(nodeData, nodeGui) {
    var that = this;
    return new Promise(function(fulfill, reject) {
        if(that.container) {
            that.container.destroy();
        }

        that.container = setupSelectedMenu(that.sidebar);
        var menuItem   = that.container;

        //hideEverything(inputs, buttons, dropdowns, checkboxes, sliders, iconGroups, systems);

        var deleteButton = setupButton(menuItem);
        deleteButton.setLabel('Delete selected');
        deleteButton.click(function() {
            if(that.tool.static.warnAtDelete === false) {
                that.tool.deleteSelected().catch(function(err) {
                    console.error(err);
                });
                return;
            }

            that.tool.popup({
                description: 'Do you want to delete ' + nodeData.name + '?',
                buttons: [
                    {
                        background: Colors.warningRed,
                        color:      Colors.white,
                        callback: function(popup) {
                            that.tool.deleteSelected().catch(function(err) {
                                console.error(err);
                            });
                            popup.destroy();
                        },
                        label: 'Confirm'
                    },

                    {
                        background: Colors.warningRed,
                        color:      Colors.white,
                        callback: function(popup) {
                            that.tool.static.warnAtDelete = false;
                            that.tool.deleteSelected().catch(function(err) {
                                console.error(err);
                            });
                            popup.destroy();
                        },
                        label: 'Confirm and don\'t remind me'
                    },

                    {
                        background: Colors.white,
                        callback: function(popup) {
                            popup.destroy();
                        },
                        label: 'Cancel'
                    }
                ]
            });
        });

        deleteButton.setBackground(Colors.warningRed);
        deleteButton.buttonContainer.show();

        var showConditions = [];
        dataModellingFilter.forEach(function(row, indexAt) {
            switch(row.type.toUpperCase()) {
                case 'INPUT':
                    var input = setupInput.call(that, menuItem, row, nodeData);
                    if(row.showCondition) {
                        showConditions.push({
                            element:  input,
                            callback: row.showCondition
                        });
                    }

                    break;
                case 'SYSTEM':
                    var container = setupSystem.call(that, that.tool.loadedModel, menuItem, row, nodeData, indexAt);
                    if(row.showCondition) {
                        showConditions.push({
                            element:  input,
                            callback: row.showCondition
                        });
                    }

                    break;
            }
        }, this);

        guiModellingFilter.forEach(function(row) {
            switch(row.type.toUpperCase()) {
                case 'INPUT':
                    var input = setupInput.call(that, menuItem, row, nodeGui);
                    if(row.showCondition) {
                        showConditions.push({
                            element:  input,
                            callback: row.showCondition
                        });
                    }
                    break;
                case 'ICONGROUP':
                    var iconGroup = setupIconGroup.call(that, menuItem, that.tool.config.url, row, nodeData, nodeGui);
                    if(row.showCondition) {
                        showConditions.push({
                            element:  input,
                            callback: row.showCondition
                        });
                    }
                    break;
            }
        }, this);

        that.showConditions = showConditions;

        fulfill();
    });
};

SelectedMenu.prototype.renderLink = function(link) {
    var that = this;
    return new Promise(function(fulfill, reject) {
        if(that.container) {
            that.container.destroy();
        }

        that.container = setupSelectedMenu(that.sidebar);
        var menuItem   = that.container;


        var deleteButton = setupButton(menuItem);
        deleteButton.setLabel('Delete selected');
        deleteButton.click(function() {
            loadedModel.emit('deleteSelected');
        });

        deleteButton.buttonContainer.show();

        var showConditions = [];
        linkModellingFilter.forEach(function(row) {
            switch(row.type.toUpperCase()) {
                case 'INPUT':
                    var input = setupInput.call(that, menuItem, row, link);
                    if(row.showCondition) {
                        showConditions.push({
                            element:  input,
                            callback: row.showCondition
                        });
                    }
                    break;
                case 'DROPDOWN':
                    var dropdown = setupDropdown.call(that, menuItem, row, link);
                    if(row.showCondition) {
                        showConditions.push({
                            element:  dropdown,
                            callback: row.showCondition
                        });
                    }
                    break;
                case 'CHECKBOX':
                    var checkbox = setupCheckbox.call(that, menuItem, row, link);
                    if(row.showCondition) {
                        showConditions.push({
                            element:  dropdown,
                            callback: row.showCondition
                        });
                    }
                    break;
            }
        }, this);

        that.showConditions = showConditions;

        fulfill();
    });
};

SelectedMenu.prototype.render = function(loadedModel) {

};

SelectedMenu.prototype.refresh = function(currentSelected, loadedModel) {
    if(currentSelected === false) {
        return this.hide();
    }

    if(this.previousSelected === currentSelected) {
        if(this.showConditions && this.showConditions.length > 0) {
            this.showConditions.forEach(function(condition) {
                if(condition.callback(this.previousSelected)) {
                    condition.element.show();
                } else {
                    condition.element.hide();
                }
            }, this);
        }

        return;
    }

    if(currentSelected && !currentSelected.objectId) {
        return this.hide();
    }

    this.showConditions   = null;
    this.previousSelected = currentSelected;

    if(currentSelected.objectId === 'nodeGui'
    || currentSelected.objectId === 'nodeData') {
        return this.renderNode(
            loadedModel.nodeData[currentSelected.id], 
            loadedModel.nodeGui[currentSelected.id]
        );
    } else if(currentSelected.objectId === 'link') {
        return this.renderLink(currentSelected);
    }
};

SelectedMenu.prototype.hide = function() {
    var that = this;
    this.container.child.fold().then(function() {
        that.container.destroy();
    });
};

SelectedMenu.prototype.show = function() {
    return this.container.child.unfold();
};

module.exports = SelectedMenu;