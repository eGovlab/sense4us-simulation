'use strict';

function getCheckbox(menuItem) {
    var checkbox = menuItem.addCheckbox(),
        that     = this;

    checkbox.onCheck(function() {
        if(checkbox.setObjectValue) {
            var v = checkbox.setObjectValue(true);
            checkbox.changeObject[checkbox.changeProperty] = v;

            that.emit('dataModified', checkbox.changeObject, checkbox.changeProperty, v);
            //loadedModel.emit([v, checkbox.changeProperty, checkbox.changeObject], 'dataModified');
        } else {
            checkbox.changeObject[checkbox.changeProperty] = true;

            that.emit('dataModified', checkbox.changeObject, checkbox.changeProperty, true);
            //loadedModel.emit([true, checkbox.changeProperty, checkbox.changeObject], 'dataModified');
        }

    });

    checkbox.onUncheck(function() {
        if(checkbox.setObjectValue) {
            var v = checkbox.setObjectValue(false);
            checkbox.changeObject[checkbox.changeProperty] = v;
            that.emit('dataModified', checkbox.changeObject, checkbox.changeProperty, v);
            //loadedModel.emit([v, checkbox.changeProperty, checkbox.changeObject], 'dataModified');
        } else {
            checkbox.changeObject[checkbox.changeProperty] = false;
            that.emit('dataModified', checkbox.changeObject, checkbox.changeProperty, false);
            //loadedModel.emit([false, checkbox.changeProperty, checkbox.changeObject], 'dataModified');
        }
    });

    return checkbox;
}

function setupCheckbox(menuItem, row, item) {
    var checkbox = getCheckbox.call(this, menuItem);

    checkbox.changeProperty = row.property;
    checkbox.changeObject   = item;

    if(item[row.property]) {
        checkbox.check();
    } else {
        checkbox.uncheck();
    }

    checkbox.setLabel(row.property);
    checkbox.refresh();

    if(row.showCondition && !row.showCondition(item)) {
        checkbox.hide();
    } else {
        checkbox.show();
    }

    return checkbox;
}

module.exports = setupCheckbox;