'use strict';

var Element  = require('./element.js'),
    Foldable = require('./foldable.js'),
    Tween    = require('./tween.js');

var easeOutCirc = Tween.easeOutCirc;

function VerticalFoldable(height, positional) {
    if(!height) {
        throw new Error('Creating vertical foldable without height.');
    }

    if(typeof height !== 'number') {
        throw new Error('Width given must be a number.');
    }

    Element.call(this);
    this.root = document.createElement('div');

    this.setHeight(0);

    this.folded         = true;
    this.foldableHeight = height;
    this.children       = [];
}

VerticalFoldable.prototype = {
    fold: function(onDone) {
        var that = this;
        return new Promise(function(fulfill, reject) {
            that.children.forEach(function(child) {
                if(child instanceof Foldable) {
                    child.fold();
                }
            });

            if(that.currentTween) {
                that.currentTween.stop();
            }

            var currentHeight = that.getHeight();
            var destination   = currentHeight;

            that.root.style['overflow-y'] = 'hidden';

            that.currentTween = easeOutCirc(destination, 250, function(width) {
                that.setHeight(currentHeight - width);
            }, function(){if(onDone){onDone()} fulfill();});

            that.folded = true;
            that.emit('folded');
        });
    },

    unfold: function(onDone) {
        var that = this;
        return new Promise(function(fulfill, reject) {
            that.children.forEach(function(child) {
                if(child instanceof Foldable) {
                    child.unfold();
                }
            });

            if(that.currentTween) {
                that.currentTween.stop();
            }

            var currentHeight = that.getHeight();
            var destination   = that.foldableHeight - currentHeight;

            that.currentTween = easeOutCirc(destination, 250, function(width) {
                that.setHeight(currentHeight + width);
            }, function(_) {that.root.style['overflow-y'] = 'scroll'; if(onDone) {onDone(_);} fulfill();});
            that.folded = false;
            that.emit('unfolded');

            console.log(that);
        });
    },

    invert: function(onDone) {
        if(this.folded) {
            return this.unfold(onDone);
        }
        
        return this.fold(onDone);
    },

    __proto__: Element.prototype
};

module.exports = VerticalFoldable;