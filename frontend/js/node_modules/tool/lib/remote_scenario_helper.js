'use strict';

function convertRemoteScenarioArray(scenarios, timetables, timesteps, highestId) {
    var scenarioMap = {
        scenarios: {},
        highestId: typeof highestId === 'number' ? highestId : 0
    };

    scenarios.forEach(function(scenario, index) {
        var newScenario = {
            id:                 scenario.id,
            syncId:             scenario.id,
            name:               scenario.name,
            maxIterations:      scenario.max_iterations,
            timeStepN:          scenario.timestep_n,
            measurement:        scenario.measurement,
            measurementAmount:  scenario.measurement_amount,
            data:               {}
        };

        scenarioMap.scenarios[newScenario.id] = newScenario;

        if(index === 0) {
            scenarioMap.loadedScenario = scenarioMap.scenarios[scenario.id];
        }

        if(scenarioMap.highestId < scenario.id) {
            scenarioMap.highestId = scenario.id;
        }
    });

    var timetableLookup = {};
    timetables.forEach(function(timetable) {
        var timetableStructure = {
            id:          timetable.id,
            syncId:      timetable.id,
            realNumbers: timetable.real_numbers,
            steps:       {}
        };

        scenarioMap.scenarios[timetable.scenario].data[timetable.node] = timetableStructure;
        timetableLookup[timetableStructure.id] = timetableStructure;
    });

    timesteps.forEach(function(timestep) {
        if(!timetableLookup[timestep.timetable]) {
            throw new Error(timestep + ' didn\'t have a timetable?');
        }

        var steps = timetableLookup[timestep.timetable].steps;
        steps[timestep.step] = timestep.value;
    });

    return scenarioMap;
}

module.exports = {
    convertRemoteScenarioArray: convertRemoteScenarioArray
};