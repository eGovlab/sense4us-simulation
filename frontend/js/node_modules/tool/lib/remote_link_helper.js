'use strict';

function convertRemoteLinkArray(links, highestId) {
    var linkMap = {
        links: {},
        highestId: typeof highestId === 'number' ? highestId : 0,
        nodeConnections: {}
    };

    links.forEach(function(link) {
        if(!link.downstream || !link.upstream) {
            throw new Error('Link with id: ' + link.id + ' is missing either upstream or downstream node.');
        }

        console.log(link);

        linkMap.links[link.id] = {
            id:          link.id,
            syncId:      link.id,
            coefficient: link.coefficient,
            node1:       link.upstream,
            node2:       link.downstream,
            threshold:   link.threshold,
            timelag:     link.timelag,
            type:        link.type || 'fullchannel',
            width:       8,

            bidirectional:        link.bidirectional         || false,
            bidirectionalTimelag: link.bidirectional_timelag || 1,

            objectId:    'link'
        };

        if(!linkMap.nodeConnections[link.downstream]) {
            linkMap.nodeConnections[link.downstream] = [];
        }

        if(!linkMap.nodeConnections[link.upstream]) {
            linkMap.nodeConnections[link.upstream] = [];
        }

        linkMap.nodeConnections[link.downstream].push(link.id);
        linkMap.nodeConnections[link.upstream].push(link.id);

        if(linkMap.highestId < link.id) {
            linkMap.highestId = link.id;
        }
    });

    return linkMap
}

module.exports = {
    convertRemoteLinkArray: convertRemoteLinkArray
};