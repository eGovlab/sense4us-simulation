'use strict';

var arithmetics = require('canvas').arithmetics,
    Emitter     = require('emitter');

function setupListeners(emitter, canvas) {
    var active = false;
    var startPos = {x: 0, y: 0},
        endPos   = {x: 0, y: 0},
        lastPos  = {x: 0, y: 0};

    var deltaPos = {x: 0, y: 0};

    var stopContextMenu = function(evt) {
        evt.preventDefault();
        evt.stopPropagation();
        return false;
    };

    canvas.addEventListener('contextmenu', stopContextMenu);
    var mouseDown = function(event) {
        var button = event.button;
        active     = true;

        startPos   = arithmetics.mouseToCanvas({x: event.pageX, y: event.pageY}, canvas);
        
        //startPos.x = startPos.x / (loadedModel.settings.zoom || 1);
        //startPos.y = startPos.y / (loadedModel.settings.zoom || 1);

        lastPos    = {x: startPos.x, y: startPos.y};

        //loadedModel.didDrag = false;

        /**
         * @description Mouse pressed down on canvas.
         * @event mouseDown
         * @memberof module:model/statusEvents
         *
         * @param {element} canvas - Canvas element
         * @param {integer} button - Mouse button
         *
         * @param {object} startPos - Start position
         * @param {object} startPos.x - X
         * @param {object} startPos.y - Y

         * @param {object} lastPos - Previous position
         * @param {object} lastPos.x - X
         * @param {object} lastPos.y - Y
         *
         * @param {function} mouseMove - Callback for mouse movement
         * @param {function} mouseUp - Callback for mouse up
         * @example tool.addListener('mouseDown', function(canvas, button, startPos, lastPos, mouseMove, mouseUp) {
         *     console.log('Mouse button', button, 'pressed down.');
         * });
         */

        window.addEventListener('mousemove', mouseMove);
        window.addEventListener('mouseup',   mouseUp);

        emitter.emit('mouseDown', canvas, button, startPos);
    };

    canvas.addEventListener('mousedown', mouseDown);
    var mouseMove  = function(event) {
        var button = event.button;

        active = true;
        endPos = arithmetics.mouseToCanvas({x: event.pageX, y: event.pageY}, canvas);

        //endPos = {x: loadedModel.static.xZoom, y: loadedModel.static.yZoom};

        //deltaPos.x = (lastPos.x - endPos.x) * loadedModel.settings.zoom;
        //deltaPos.y = (lastPos.y - endPos.y) * loadedModel.settings.zoom;

        deltaPos.x = lastPos.x - endPos.x;
        deltaPos.y = lastPos.y - endPos.y;

        lastPos.x = endPos.x;
        lastPos.y = endPos.y;

        /*startPos.x = endPos.x;
        startPos.y = endPos.y;*/

        /**
         * @description While mouse button pressed down on and move on canvas.
         * @event mouseMove
         * @memberof module:model/statusEvents
         *
         * @param {element} canvas - Canvas element
         * @param {integer} button - Mouse button
         *
         * @param {object} startPos - Start position
         * @param {object} startPos.x - X
         * @param {object} startPos.y - Y

         * @param {object} lastPos - Previous position
         * @param {object} lastPos.x - X
         * @param {object} lastPos.y - Y
         
         * @param {object} endPos - Current position
         * @param {object} endPos.x - X
         * @param {object} endPos.y - Y

         * @param {object} delta - Delta
         * @param {object} delta.x - X
         * @param {object} delta.y - Y
         
         * @example tool.addListener('mouseMove', function(canvas, button, startPos, lastPos, endPos, delta) {
         *     console.log('Mouse moved', delta.x, delta.y, '.');
         * });
         */

        emitter.emit('mouseMove', canvas, button, startPos, lastPos, deltaPos);
    };

    var mouseUp = function(event) {
        var button = event.button;

        active = false;

        endPos = arithmetics.mouseToCanvas({x: event.pageX, y: event.pageY}, canvas);
        //endPos = {x: loadedModel.static.xZoom, y: loadedModel.static.yZoom};


        window.removeEventListener('mousemove', mouseMove);
        window.removeEventListener('mouseup',   mouseUp);

        /**
         * @description Mouse released.
         * @event mouseUp
         * @memberof module:model/statusEvents
         *
         * @param {element} canvas - Canvas element
         * @param {integer} button - Mouse button
         
         * @param {object} endPos - Current position
         * @param {object} endPos.x - X
         * @param {object} endPos.y - Y
         
         * @example tool.addListener('mouseUp', function(canvas, button, endPos) {
         *     console.log('Mouse released at', endPos.x, endPos.y);
         * });
         */
        emitter.emit('mouseUp', canvas, button, startPos, endPos);
    };
}

function MouseEmitter(canvas) {
    this.listeners = {};
    setupListeners(this, canvas);
}

MouseEmitter.prototype = {
    __proto__: Emitter.prototype
}

module.exports = MouseEmitter;