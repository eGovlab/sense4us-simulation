'use strict';

var Immutable       = null,
    network         = require('network'),
    breakout        = require('breakout'),
    objectHelper    = require('object-helper'),
    scenarioHelper  = require('scenario-helper');

var simulate = [
    {
        header: 'Simulate',
        type:   'BUTTON',
        id:     'simulateButton',
        callback: function(tool, loadedModel) {
            var data = {
                timestep: loadedModel.loadedScenario.maxIterations,
                nodes:    breakout.nodes(loadedModel),
                links:    breakout.links(loadedModel),
                scenario: {
                    maxIterations:     loadedModel.loadedScenario.maxIterations,
                    measurement:       loadedModel.loadedScenario.measurement,
                    measurementAmount: loadedModel.loadedScenario.measurementAmount,
                    syncId:            loadedModel.loadedScenario.syncId,
                    timeStepN:         loadedModel.loadedScenario.timeStepN
                }
            };

            var t       = loadedModel.loadedScenario.data;
            var newData = {};
            objectHelper.forEach.call(t, function(table, nodeId) {
                if(!table.realNumbers) {
                    newData[nodeId] = table;
                    return;
                }

                var realSteps = scenarioHelper.realNumbersToChange(table.steps, loadedModel.nodeData[nodeId].baseline);
                newData[nodeId] = {
                    steps: realSteps
                };
            });

            data.scenario.data = newData;

            objectHelper.forEach.call(
                loadedModel.nodeData,
                function(node) {
                    node.simulateChange = [];
                }
            );

            var url           = tool.config.url,
                userFilter    = tool.config.userFilter,
                projectFilter = tool.config.projectFilter;
            network.POST(
                tool.config.url,
                '/models/' + userFilter + '/' + projectFilter + '/simulate',
                data
            ).then(function(response) {
                response = JSON.parse(response.responseText);

                var timeSteps = response.response;
                var nodeData  = loadedModel.nodeData;
                timeSteps.forEach(function(timeStep) {
                    timeStep.forEach(function(node) {
                        var currentNode = nodeData[node.id];
                        currentNode.simulateChange.push(node.relativeChange);
                    });
                });

                tool.emit('showSimulate', true);
                loadedModel.emit('refresh');
            }).catch(function(err) {
                console.error(err);
                console.error(response);
                tool.emit('notification', response.response.message);
            });
        }
    },

    {
        header: 'Linegraph',
        type:   'CHECKBOX',
        ajax:   true,
        onCheck: function(tool, loadedModel) {
            var settings       = loadedModel.settings;
            settings.linegraph = true;

            loadedModel.emit('refresh');
        },

        onUncheck: function(tool, loadedModel) {
            var settings       = loadedModel.settings;
            settings.linegraph = false;

            loadedModel.emit('refresh');
        }
    },

    {
        header: 'Show simulate changes',
        type:   'CHECKBOX',
        id:     'simulateCheckbox',

        onCheck: function(tool, loadedModel) {
            tool.static.showSimulate = true;
            loadedModel.emit('refresh');
        },

        onUncheck: function(tool, loadedModel) {
            tool.static.showSimulate = false;
            loadedModel.emit('refresh');
        }
    },

    {
        header: 'Show change as a real number',
        type:   'CHECKBOX',

        onCheck: function(tool, loadedModel) {
            tool.renderChangePercent = false;
            loadedModel.emit('refresh');
        },

        onUncheck: function(tool, loadedModel) {
            tool.renderChangePercent = true;
            loadedModel.emit('refresh');
        }
    },

    {
        header: 'Time step T',
        type:   'DROPDOWN',
        values: [
            'Week',
            'Month',
            'Year'
        ],

        defaultValue: function(model, values) {
            return model.loadedScenario.measurement;
        },

        onChange: function(model, value) {
            model.loadedScenario.measurement = value;
        }
    },

    {
        header: 'Time step N',
        type:   'SLIDER',
        id:     'timestep',

        defaultValue: function(model) {
            return model.loadedScenario.timeStepN;
        },

        range: function(model) {
            return [0, model.loadedScenario.maxIterations];
        },

        onSlide: function(model, value) {
            model.loadedScenario.timeStepN = parseInt(value);

            model.emit('refresh');
        },

        onChange: function(model, value) {
            model.loadedScenario.timeStepN = parseInt(value);
        }
    },

    {
        header: 'Max iterations',
        type:   'INPUT',
        id:     'iterations',

        defaultValue: function(model) {
            return model.loadedScenario.maxIterations;
        },

        onChange: function(model, value) {
            model.loadedScenario.maxIterations = parseInt(value);
        }
    }
];

module.exports = simulate;
