'use strict';

/**
 * @module frontend/node_modules/network
 */

var Promise = require('promise');

/**
 * @description Simple regex to validate a domain.
 *
 * @param {string} domain - The domain to validate.
 */

function validateDomain(domain) {
    var check = domain.match(/^(http[s]?):\/\/([a-zA-Z0-9\.]+)\/?.*$|^(http[s]?):\/\/([a-zA-Z0-9\.]+):(\d+)\/?.*$/);

    if(check === null) {
        console.error(domain);
        throw new Error('Domain of invalid structure!');
    }

    return domain;
}

/**
 * @description Send data with an XMLHttpRequest.
 * @returns {Promise}
 *
 * @param {string} [domain] - Domain to hit.
 * @param {string} path - Path of request.
 * @param {string} [jsonData] - Optional jsonData.
 * @param {string} [method] - Optional method. Defaults to GET
 */

function sendData(domain, path, jsonData, method) {
    var httpRequest = new XMLHttpRequest();
    var p = new Promise(function(fulfill, reject) {
        if(!path && !method && (!jsonData || typeof jsonData === 'string')) {
            var t = domain,
                e = path;

            domain   = '';
            path     = t;
            method   = jsonData;
            jsonData = e;
        } else {
            validateDomain(domain);
        }

        if(typeof domain !== 'string') {
            return reject(new Error('sendData got invalid type for domain or port!'));
        }

        if(jsonData) {
            if(typeof jsonData !== 'object') {
                return reject(new Error('Expected JS object as jsonData.'));
            }

            jsonData = JSON.stringify(jsonData, null, 4);
        }

        var requestPath;

        if (!httpRequest) {
            return reject(new Error('Giving up :( Cannot create an XMLHttp instance.'))
        }

        httpRequest.onreadystatechange = function() {
            if (httpRequest.readyState === 4) {
                if(httpRequest.status === 0) {
                    return reject(new Error('Connection refused.'));
                }

                fulfill(httpRequest);
            }
        };

        if (!method) {
            method = 'GET';
            if (jsonData) {
                method = 'POST';
            }
        }

        if(domain.charAt(domain.length - 1) === '/') {
            domain = domain.slice(0, domain.length - 1);
        }

        if(path.charAt(0) !== '/') {
            path = '/' + path;
        }

        httpRequest.open(method, domain + path);
        httpRequest.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
        httpRequest.setRequestHeader('Accept', 'application/json');
        if (jsonData && typeof jsonData !== 'function') {
            httpRequest.send(jsonData);
        } else {
            httpRequest.send();
        }
    });

    p.abort = function(){httpRequest.abort();};

    return p;
}

/**
 * @namespace
 * @property {object} module.exports - The exported object with available helper methods for AJAX building.
 * @property {function} module.exports.GET - Helper method for GET requests.
 * @property {function} module.exports.POST - Helper method for POST requests.
 * @property {function} module.exports.PUT - Helper method for PUT requests.
 * @property {function} module.exports.PATCH - Helper method for PATCH requests.
 * @property {function} module.exports.DELETE - Helper method for DELETE requests.
 * @property {function} module.exports.helper - Helper method for the above helper requests. Meta.
 * @property {function} module.exports.sendData - The method underneath all the above helper methods.
 */

module.exports = {
    GET: function(domain, path) {
        return this.sendData(domain, path);
    },

    POST: function(domain, path, data) {
        return this.helper(domain, path, data, 'POST');
    },

    PUT: function(domain, path, data) {
        return this.helper(domain, path, data, 'PUT');
    },

    PATCH: function(domain, path, data) {
        return this.helper(domain, path, data, 'PATCH');
    },

    DELETE: function(domain, path, data) {
        return this.helper(domain, path, data, 'DELETE');
    },

    helper: function(domain, path, data, method) {
        if(!data) {
            data   = method;
            method = undefined;
        }

        return this.sendData(domain, path, data, method);
    },

    sendData: sendData
};