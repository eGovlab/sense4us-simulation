'use strict';

var objectHelper = require('object-helper'),
    createLink   = require('structures').createLink,
    linker       = require('linker'),
    hitTest      = require('collisions').hitTest;

function link(data) {
    var nodeData = data.nodeData,
        nodeGui  = data.nodeGui,
        links    = data.links;

    var linkingNodes = objectHelper.filter.call(
        nodeGui,
        function(node) {
            return node.linking === true;
        }
    );

    objectHelper.forEach.call(
        linkingNodes,
        function(node) {
            var hit = objectHelper.filter.call(
                nodeGui,
                function(maybeCollidingNode) {
                    return maybeCollidingNode.linking !== true && hitTest(maybeCollidingNode, linker(node));
                }
            );
            objectHelper.forEach.call(
                hit,
                function(collided) {
                    if(node.links === undefined) {
                        node.links = [];
                    }

                    var collidedLinks = collided.links;
                    if(collidedLinks === undefined) {
                        collided.links = [];
                    }

                    var nodeId     = node.id,
                        collidedId = collided.id;

                    var sourceData = nodeData[node.id];
                    var destData   = nodeData[collidedId];
                    if(sourceData.type.toUpperCase() === 'ACTOR') {
                        if(destData.type.toUpperCase() !== 'ORIGIN') {
                            return;
                        }
                    }

                    try {
                        var sourceGui = nodeGui[nodeId];
                        for(var i = 0; i < sourceGui.links.length; i++) {
                            var link = links[sourceGui.links[i]];
                            if((link.node1 === nodeId && link.node2 === collidedId)
                                || (link.node1 === collidedId && link.node2 === nodeId)) {
                                link.bidirectional        = true;
                                link.bidirectionalTimelag = 1;
                                
                                data.selectableObjectUpdated = true;
                                return;
                            }
                        }

                        var newLink = createLink(data.generateId, nodeId, collidedId);

                        data.history.push({
                            action: 'newLink',
                            data:   {
                                link: newLink
                            }
                        });

                        links[newLink.id] = newLink;

                        nodeGui[nodeId].links.push(newLink.id);
                        nodeGui[collidedId].links.push(newLink.id);

                        data.newLinks.push(newLink);
                    } catch(e) {
                        console.error(nodeData);
                        console.error(nodeGui);
                        console.error(links);
                        
                        throw e;
                    }
                }
            );
        }
    );

    return data;
}

module.exports = link;